import Head from "next/head";
import Header from "../components/Header";
import styled from "styled-components";
import Navigation from "../components/Navigation";
import TeamComponent from "../components/TeamComponent";
import { useEffect, useState } from "react";
import { Match, Team } from "../interfaces/interfaces";
import getAllTeams from "../utils/getAllTeams";
import { nanoid } from "nanoid";
import postRound from "../utils/postRound";
import getRounds from "../utils/getRounds";
import updateTournamentRounds from "../utils/updateTournamentData";
import createNextRoundMatches from "../utils/createNextRoundMatches";

type TournamentProps = {
  rounds: any[][];
  setRounds: Function;
};

export default function Tournament({ rounds, setRounds }: TournamentProps) {
  const [isClicked, setIsClicked] = useState(false);
  const [nextRoundTeams, setNextRoundTeams] = useState<Team[]>([]);
  const tournamentName = "goldbach";

  function handleClick() {
    setIsClicked(!isClicked);
  }

  async function handleUpdateScoreInDB(e: any) {
    e.stopPropagation();
    updateTournamentRounds(tournamentName, rounds);
  }

  function handleDetermineWinner(e: any, match: Match) {
    e.stopPropagation();

    if (match.team1.points > match.team2.points) {
      const team1 = { ...match.team1, points: 0 };
      const updatedMatch = [...nextRoundTeams, team1];
      setNextRoundTeams(updatedMatch);
    } else {
      const team2 = { ...match.team2, points: 0 };
      const updatedMatch = [...nextRoundTeams, team2];
      setNextRoundTeams(updatedMatch);
    }
  }

  useEffect(() => {
    async function createTournamentAndManageDatabank() {
      const teams = await getAllTeams();
      //We need two teams per game and the number of games must be even for the sake of the tournament
      if ((teams.length / 2) % 2 === 0) {
        const matchList = createNextRoundMatches(teams);
        setRounds([matchList]);
        postRound([matchList], tournamentName);
      }
    }

    async function manageGetRounds() {
      const DBTournamentRounds = await getRounds(tournamentName);
      if (!DBTournamentRounds) {
        createTournamentAndManageDatabank();
      } else {
        setRounds(DBTournamentRounds);
      }
    }

    manageGetRounds();
  }, []);

  useEffect(() => {
    if (
      rounds.length > 0 &&
      nextRoundTeams.length === rounds[rounds.length - 1].length
    ) {
      const nextRoundMatches = createNextRoundMatches(nextRoundTeams);
      const updatedRounds = [...rounds, nextRoundMatches];
      setRounds(updatedRounds);
      setNextRoundTeams([]);
      updateTournamentRounds(tournamentName, updatedRounds);
    }
  }, [nextRoundTeams, rounds]);

  return (
    <StyledDiv>
      <Head>
        <title>MatchBall</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header teaser={"Games"} />
      <StyledMatchWrapperSection>
        {rounds.length > 0 && rounds ? (
          rounds.map((round: any, index: number) => {
            return (
              <StyledRound key={index}>
                <p>Runde {index + 1}</p>
                {!round[0].team2.players ? (
                  <>
                    <p>The Winner is:</p>
                    <TeamComponent
                      showPoints={false}
                      team={round[0].team1}
                      isClickable={false}
                    />
                  </>
                ) : (
                  <StyledUl data-cy="match-list" key={nanoid()}>
                    {round.map((match: Match, index: number) => {
                      return (
                        <StyledMatch key={match.id} onClick={handleClick}>
                          <StyledP>Spiel {index + 1}</StyledP>
                          <TeamComponent
                            showPoints={true}
                            team={match.team1}
                            isClickable={true}
                          />
                          <StyledP>gegen</StyledP>
                          <TeamComponent
                            showPoints={true}
                            team={match.team2}
                            isClickable={true}
                          />
                          <button
                            onClick={(e) => {
                              handleDetermineWinner(e, match);
                              handleUpdateScoreInDB(e);
                            }}
                          >
                            Best√§tigen
                          </button>
                        </StyledMatch>
                      );
                    })}
                  </StyledUl>
                )}
              </StyledRound>
            );
          })
        ) : (
          <p>
            Die Nummer der Mannschaften geteilt durch zwei muss gerade sein, um
            ein Turnier zu erstellen
          </p>
        )}
      </StyledMatchWrapperSection>
      <Navigation />
    </StyledDiv>
  );
}

const StyledDiv = styled.div`
  height: 100dvh;
  width: 100dvw;
  padding: 0;
  font-size: 20px;
  font-family: baloo_2;
  position: relative;
  overflow: hidden;
  background-color: grey;
`;

const StyledUl = styled.ul`
  list-style-type: none;
`;

const StyledP = styled.p`
  color: white;
  margin-left: 1rem;
`;

const StyledMatchWrapperSection = styled.section`
  border: 1px solid white;
  height: 65dvh;
  width: 100dvw;
  margin-top: -1rem;
  overflow: scroll;
  display: flex;
  flex-direction: row-reverse;
`;

const StyledMatch = styled.li`
  position: relative;
  width: 50dvw;
  margin-top: 1rem;
  /* From https://css.glass */
  background: rgba(255, 255, 255, 0.2);
  border-radius: 16px;
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
  backdrop-filter: blur(8px);
  -webkit-backdrop-filter: blur(5px);
  border: 1px solid rgba(255, 255, 255, 0.3);
`;

const StyledRound = styled.div`
  position: relative;
  width: auto;
  height: fit-content;
  margin-left: 1dvw;
  margin-top: 1rem;
  /* From https://css.glass */
  background: rgba(255, 255, 255, 0.2);
  border-radius: 16px;
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
  backdrop-filter: blur(8px);
  -webkit-backdrop-filter: blur(5px);
  border: 1px solid rgba(255, 255, 255, 0.3);
`;
